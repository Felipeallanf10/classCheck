# ==============================================
# Docker Compose - ClassCheck Development Environment
# Stack: Next.js + TypeScript + MySQL + Prisma
# ==============================================

services:
  # ===================
  # APLICAÇÃO NEXT.JS
  # ===================
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: classcheck-app
    
    # Mapeamento de portas: HOST:CONTAINER
    ports:
      - "3000:3000"
    
    # Variáveis de ambiente
    environment:
      - NODE_ENV=development
      - DATABASE_URL=mysql://classcheck_user:classcheck_password@db:3306/classcheck_db
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=your-secret-key-change-in-production
    
    # Volumes para hot reload e persistência
    volumes:
      # Montar código fonte (permite hot reload)
      - .:/app
      # Volume anônimo para node_modules (evita conflitos Windows/Linux)
      - /app/node_modules
      # Montar Next.js cache
      - ./.next:/app/.next
    
    # Dependências de outros serviços
    depends_on:
      db:
        condition: service_healthy
    
    # Rede customizada
    networks:
      - classcheck-network
    
    # Política de restart
    restart: unless-stopped
    
    # Comando para aguardar o banco estar pronto
    command: >
      sh -c "
        echo 'Aguardando banco de dados...' &&
        sleep 10 &&
        echo 'Iniciando aplicação Next.js...' &&
        npm run dev
      "

  # ===================
  # BANCO MYSQL
  # ===================
  db:
    image: mysql:8.0
    container_name: classcheck-db
    
    # Mapeamento de portas: HOST:CONTAINER (usando porta 3307 para evitar conflito)
    ports:
      - "3307:3306"
    
    # Variáveis de ambiente do MySQL
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: classcheck_db
      MYSQL_USER: classcheck_user
      MYSQL_PASSWORD: classcheck_password
      MYSQL_ROOT_HOST: '%'
    
    # Volume para persistir dados do banco
    volumes:
      - mysql_data:/var/lib/mysql
      # Scripts de inicialização (opcional)
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
    
    # Rede customizada
    networks:
      - classcheck-network
    
    # Health check para garantir que o banco está pronto
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot_password"]
      timeout: 10s
      retries: 10
      interval: 10s
      start_period: 40s
    
    # Política de restart
    restart: unless-stopped

  # ===================
  # PHPMYADMIN (OPCIONAL)
  # Interface web para gerenciar MySQL
  # ===================
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: classcheck-phpmyadmin
    
    # Mapeamento de portas: HOST:CONTAINER
    ports:
      - "8080:80"
    
    # Configurações do phpMyAdmin
    environment:
      PMA_HOST: db
      PMA_PORT: 3306
      PMA_USER: root
      PMA_PASSWORD: root_password
      MYSQL_ROOT_PASSWORD: root_password
    
    # Dependências
    depends_on:
      db:
        condition: service_healthy
    
    # Rede customizada
    networks:
      - classcheck-network
    
    # Política de restart
    restart: unless-stopped

# ===================
# VOLUMES
# ===================
volumes:
  # Volume nomeado para persistir dados do MySQL
  mysql_data:
    driver: local

# ===================
# NETWORKS
# ===================
networks:
  # Rede customizada para isolamento
  classcheck-network:
    driver: bridge

# ==============================================
# COMANDOS ÚTEIS:
# 
# Subir ambiente:
#   docker-compose up --build
# 
# Subir em background:
#   docker-compose up -d --build
# 
# Ver logs:
#   docker-compose logs -f app
#   docker-compose logs -f db
# 
# Executar comandos no container:
#   docker-compose exec app npm run lint
#   docker-compose exec app npx prisma migrate dev
#   docker-compose exec app npx prisma studio
# 
# Parar ambiente:
#   docker-compose down
# 
# Parar e remover volumes:
#   docker-compose down -v
# 
# Rebuild completo:
#   docker-compose down && docker-compose build --no-cache && docker-compose up
# ==============================================
