// ==============================================
// PRISMA SCHEMA - ClassCheck
// Database: MySQL 8.0
// ==============================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ==============================================
// MODELOS DO CLASSCHECK
// ==============================================

// Modelo Usuario
model Usuario {
  id        Int      @id @default(autoincrement())
  email     String   @unique @db.VarChar(255)
  nome      String   @db.VarChar(255)
  avatar    String?  @db.Text
  role      Role     @default(ALUNO)
  ativo     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  avaliacoes     Avaliacao[]
  humorRegistros HumorRegistro[]
  aulasFavoritas AulaFavorita[]
  avaliacoesSocioemocionais AvaliacaoSocioemocional[]

  @@map("usuarios")
}

// Modelo Professor  
model Professor {
  id        Int      @id @default(autoincrement())
  nome      String   @db.VarChar(255)
  email     String   @unique @db.VarChar(255)
  materia   String   @db.VarChar(255)
  avatar    String?  @db.Text
  ativo     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  aulas Aula[]

  @@map("professores")
}

// Modelo Aula
model Aula {
  id          Int      @id @default(autoincrement())
  titulo      String   @db.VarChar(255)
  descricao   String?  @db.Text
  materia     String   @db.VarChar(255)
  dataHora    DateTime
  duracao     Int      // em minutos
  professorId Int
  sala        String?  @db.VarChar(100)
  status      StatusAula @default(AGENDADA)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  professor      Professor      @relation(fields: [professorId], references: [id])
  avaliacoes     Avaliacao[]
  aulasFavoritas AulaFavorita[]
  eventos        Evento[]

  @@map("aulas")
}

// Modelo Avaliacao (Humor/Feedback da aula)
model Avaliacao {
  id        Int      @id @default(autoincrement())
  usuarioId Int
  aulaId    Int
  humor     TipoHumor
  nota      Int?     @db.TinyInt // 1-5 estrelas
  feedback  String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  usuario Usuario @relation(fields: [usuarioId], references: [id])
  aula    Aula    @relation(fields: [aulaId], references: [id])

  // Um usu√°rio s√≥ pode avaliar uma aula uma vez
  @@unique([usuarioId, aulaId])
  @@map("avaliacoes")
}

// Modelo HumorRegistro (Registro di√°rio de humor)
model HumorRegistro {
  id        Int      @id @default(autoincrement())
  usuarioId Int
  humor     TipoHumor
  data      DateTime @db.Date
  observacao String? @db.Text
  createdAt DateTime @default(now())

  // Relacionamentos
  usuario Usuario @relation(fields: [usuarioId], references: [id])

  // Um usu√°rio s√≥ pode registrar humor uma vez por dia
  @@unique([usuarioId, data])
  @@map("humor_registros")
}

// Modelo AulaFavorita
model AulaFavorita {
  id        Int      @id @default(autoincrement())
  usuarioId Int
  aulaId    Int
  createdAt DateTime @default(now())

  // Relacionamentos
  usuario Usuario @relation(fields: [usuarioId], references: [id])
  aula    Aula    @relation(fields: [aulaId], references: [id])

  // Um usu√°rio n√£o pode favoritar a mesma aula duas vezes
  @@unique([usuarioId, aulaId])
  @@map("aulas_favoritas")
}

// Modelo Evento (Calend√°rio)
model Evento {
  id        Int         @id @default(autoincrement())
  titulo    String      @db.VarChar(255)
  descricao String?     @db.Text
  dataInicio DateTime
  dataFim   DateTime?
  cor       String?     @db.VarChar(7) // Hex color
  tipo      TipoEvento  @default(EVENTO)
  aulaId    Int?        // Opcional, pode ser evento n√£o relacionado a aula
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relacionamentos
  aula Aula? @relation(fields: [aulaId], references: [id])

  @@map("eventos")
}

// Modelo AvaliacaoSocioemocional (Sistema Psicom√©trico)
model AvaliacaoSocioemocional {
  id               String   @id @default(cuid())
  usuarioId        Int
  estadoEmocional  String   @db.VarChar(50)  // Ex: "feliz", "ansioso", "focado"
  valencia         Float    // -2.0 a +2.0 (modelo circumplex)
  ativacao         Float    // -2.0 a +2.0 (modelo circumplex)
  confianca        Float    // 0.0 a 1.0 (confiabilidade da predi√ß√£o)
  observacoes      String?  @db.Text
  respostas        String?  @db.Text // JSON das respostas do question√°rio
  dataAvaliacao    DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relacionamentos
  usuario Usuario @relation(fields: [usuarioId], references: [id])

  @@map("avaliacoes_socioemocionais")
}

// ==============================================
// ENUMS
// ==============================================

enum Role {
  ALUNO
  PROFESSOR
  ADMIN
}

enum TipoHumor {
  MUITO_TRISTE  // üò¢ 1
  TRISTE        // üòï 2  
  NEUTRO        // üòê 3
  FELIZ         // üôÇ 4
  MUITO_FELIZ   // üòÑ 5
}

enum StatusAula {
  AGENDADA
  EM_ANDAMENTO
  CONCLUIDA  
  CANCELADA
}

enum TipoEvento {
  AULA
  PROVA
  EVENTO
  FERIADO
  REUNIAO
}
